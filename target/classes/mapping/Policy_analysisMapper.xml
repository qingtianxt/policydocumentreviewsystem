<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="stdu.wzw.mapper.Policy_analysisMapper">
    <resultMap id="BaseResultMap" type="stdu.wzw.model.Policy_analysis">
        <id column="analysis_id" property="analysisId" jdbcType="INTEGER"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="policy_id" property="policyId" jdbcType="INTEGER"/>
        <result column="content_id" property="contentId" jdbcType="INTEGER"/>
        <result column="analysis_result" property="analysisResult" jdbcType="VARCHAR"/>
        <result column="analysis_sensitive" property="analysisSensitive" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="stdu.wzw.model.Policy_analysis" extends="BaseResultMap">
        <result column="analysis_name" property="analysisName" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    analysis_id, type, create_date, policy_id, content_id, analysis_result, analysis_sensitive
  </sql>
    <sql id="Blob_Column_List">
    analysis_name
  </sql>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from policyanalysis
        where analysis_id = #{analysisId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from policyanalysis
    where analysis_id = #{analysisId,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="stdu.wzw.model.Policy_analysis">
    insert into policyanalysis (analysis_id, type, create_date, 
      policy_id, content_id, analysis_result, 
      analysis_sensitive, analysis_name)
    values (#{analysisId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, 
      #{policyId,jdbcType=INTEGER}, #{contentId,jdbcType=INTEGER}, #{analysisResult,jdbcType=VARCHAR}, 
      #{analysisSensitive,jdbcType=VARCHAR}, #{analysisName,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="stdu.wzw.model.Policy_analysis">
        insert into policyanalysis
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="analysisId != null">
                analysis_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="policyId != null">
                policy_id,
            </if>
            <if test="contentId != null">
                content_id,
            </if>
            <if test="analysisResult != null">
                analysis_result,
            </if>
            <if test="analysisSensitive != null">
                analysis_sensitive,
            </if>
            <if test="analysisName != null">
                analysis_name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="analysisId != null">
                #{analysisId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="policyId != null">
                #{policyId,jdbcType=INTEGER},
            </if>
            <if test="contentId != null">
                #{contentId,jdbcType=INTEGER},
            </if>
            <if test="analysisResult != null">
                #{analysisResult,jdbcType=VARCHAR},
            </if>
            <if test="analysisSensitive != null">
                #{analysisSensitive,jdbcType=VARCHAR},
            </if>
            <if test="analysisName != null">
                #{analysisName,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="stdu.wzw.model.Policy_analysis">
        update policyanalysis
        <set>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="policyId != null">
                policy_id = #{policyId,jdbcType=INTEGER},
            </if>
            <if test="contentId != null">
                content_id = #{contentId,jdbcType=INTEGER},
            </if>
            <if test="analysisResult != null">
                analysis_result = #{analysisResult,jdbcType=VARCHAR},
            </if>
            <if test="analysisSensitive != null">
                analysis_sensitive = #{analysisSensitive,jdbcType=VARCHAR},
            </if>
            <if test="analysisName != null">
                analysis_name = #{analysisName,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where analysis_id = #{analysisId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="stdu.wzw.model.Policy_analysis">
    update policyanalysis
    set type = #{type,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      policy_id = #{policyId,jdbcType=INTEGER},
      content_id = #{contentId,jdbcType=INTEGER},
      analysis_result = #{analysisResult,jdbcType=VARCHAR},
      analysis_sensitive = #{analysisSensitive,jdbcType=VARCHAR},
      analysis_name = #{analysisName,jdbcType=LONGVARCHAR}
    where analysis_id = #{analysisId,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="stdu.wzw.model.Policy_analysis">
    update policyanalysis
    set type = #{type,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      policy_id = #{policyId,jdbcType=INTEGER},
      content_id = #{contentId,jdbcType=INTEGER},
      analysis_result = #{analysisResult,jdbcType=VARCHAR},
      analysis_sensitive = #{analysisSensitive,jdbcType=VARCHAR}
    where analysis_id = #{analysisId,jdbcType=INTEGER}
  </update>
    <select id="getCountByPolicyId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        select
        count(policy_id)
        from policyanalysis
        where policy_id = #{policyId,jdbcType=INTEGER}
    </select>
    <select id="getByPolicyBased" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from policyanalysis
        where policy_id = #{policyId,jdbcType=INTEGER} and type
        &lt;
        10
    </select>
    <select id="getByPolicyAndType" resultMap="ResultMapWithBLOBs" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from policyanalysis
        where policy_id = #{policyId,jdbcType=INTEGER} and type =#{type,jdbcType=INTEGER}
    </select>
    <select id="findAll" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from policyanalysis
    </select>

    <select id="findBytype" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from policyanalysis
        where type =#{type,jdbcType=INTEGER}
    </select>

</mapper>